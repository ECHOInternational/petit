require 'bundler/setup'
require "bundler/gem_tasks"
require 'aws-sdk'

namespace :db do 
	task :setup do
		# Create the database if it doesn't exist.

		# Pull in the environment variables needed to create the database table
		table_name = ENV['DB_TABLE_NAME'] #|| new_resource.environment['DB_TABLE_NAME']
		aws_region = ENV['AWS_REGION'] #|| new_resource.environment['AWS_REGION']
		aws_access_key_id = ENV['AWS_ACCESS_KEY_ID'] #|| new_resource.environment['AWS_ACCESS_KEY_ID']
		aws_secret_access_key = ENV['AWS_SECRET_ACCESS_KEY'] #|| new_resource.environment['AWS_SECRET_ACCESS_KEY']

		dynamo_db_client = Aws::DynamoDB::Client.new(
			region: aws_region,
			access_key_id: aws_access_key_id,
			secret_access_key: aws_secret_access_key
		)
		puts 'Created DynamoDB client'
		puts 'Checking for, and creating table:' + table_name

		table_definition = {
		  attribute_definitions: [ # required
		    {
		      attribute_name: 'shortcode', # required
		      attribute_type: 'S', # required, accepts S, N, B
		    },
		    {
		      attribute_name: 'destination', # required
		      attribute_type: 'S', # required, accepts S, N, B
		    },
		    # {
		    #   attribute_name: "ssl", # required
		    #   attribute_type: "B", # required, accepts S, N, B
		    # },
		    # {
		    #   attribute_name: "accessCount", # required
		    #   attribute_type: "N", # required, accepts S, N, B
		    # },
		  ],
		  table_name: table_name, # required
		  key_schema: [ # required
		    {
		      attribute_name: 'shortcode', # required
		      key_type: 'HASH', # required, accepts HASH, RANGE
		    }
		  ],
		  global_secondary_indexes: [
		    {
		      index_name: 'destinationIndex', # required
		      key_schema: [ # required
		        {
		          attribute_name: 'destination', # required
		          key_type: 'HASH', # required, accepts HASH, RANGE
		        }
		      ],
		      projection: { # required
		        projection_type: 'ALL', # accepts ALL, KEYS_ONLY, INCLUDE
		      },
		      provisioned_throughput: { # required
		        read_capacity_units: 1, # required
		        write_capacity_units: 1, # required
		      }
		    }
		  ],
		  provisioned_throughput: { # required
		    read_capacity_units: 1, # required
		    write_capacity_units: 1, # required
		  },
		  stream_specification: {
		    stream_enabled: false
		  }
		}

		begin
			dynamo_db_client.create_table(table_definition)
		rescue Aws::DynamoDB::Errors::ResourceInUseException
			puts 'Table Already Exists'
		end

		puts 'Checking Table'

		begin
		  dynamo_db_client.describe_table(
		    table_name: table_definition[:table_name]
		  )
		rescue Aws::DynamoDB::Errors::ResourceNotFoundException
			puts 'Table does not exist, check configuration.'
		end
	end
end
